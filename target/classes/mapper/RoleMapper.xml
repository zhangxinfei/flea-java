<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.soecode.lyf.mapper.RoleMapper" >
  <resultMap id="BaseResultMap" type="com.soecode.lyf.entity.Role" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="roleName" property="roleName" jdbcType="VARCHAR" />
    <result column="roleNnfo" property="roleNnfo" jdbcType="VARCHAR" />
    <result column="roleLevel" property="roleLevel" jdbcType="INTEGER" />
    <result column="createData" property="createData" jdbcType="VARCHAR" />
    <result column="createBy" property="createBy" jdbcType="VARCHAR" />
    <result column="updateBate" property="updateBate" jdbcType="VARCHAR" />
    <result column="updateBy" property="updateBy" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, roleName, roleNnfo, roleLevel, createData, createBy, updateBate, updateBy
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from role
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from role
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.soecode.lyf.entity.Role" >
    insert into role (id, roleName, roleNnfo, 
      roleLevel, createData, createBy, 
      updateBate, updateBy)
    values (#{id,jdbcType=INTEGER}, #{roleName,jdbcType=VARCHAR}, #{roleNnfo,jdbcType=VARCHAR}, 
      #{roleLevel,jdbcType=INTEGER}, #{createData,jdbcType=VARCHAR}, #{createBy,jdbcType=VARCHAR}, 
      #{updateBate,jdbcType=VARCHAR}, #{updateBy,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.soecode.lyf.entity.Role" >
    insert into role
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="roleName != null" >
        roleName,
      </if>
      <if test="roleNnfo != null" >
        roleNnfo,
      </if>
      <if test="roleLevel != null" >
        roleLevel,
      </if>
      <if test="createData != null" >
        createData,
      </if>
      <if test="createBy != null" >
        createBy,
      </if>
      <if test="updateBate != null" >
        updateBate,
      </if>
      <if test="updateBy != null" >
        updateBy,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="roleName != null" >
        #{roleName,jdbcType=VARCHAR},
      </if>
      <if test="roleNnfo != null" >
        #{roleNnfo,jdbcType=VARCHAR},
      </if>
      <if test="roleLevel != null" >
        #{roleLevel,jdbcType=INTEGER},
      </if>
      <if test="createData != null" >
        #{createData,jdbcType=VARCHAR},
      </if>
      <if test="createBy != null" >
        #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="updateBate != null" >
        #{updateBate,jdbcType=VARCHAR},
      </if>
      <if test="updateBy != null" >
        #{updateBy,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.soecode.lyf.entity.Role" >
    update role
    <set >
      <if test="roleName != null" >
        roleName = #{roleName,jdbcType=VARCHAR},
      </if>
      <if test="roleNnfo != null" >
        roleNnfo = #{roleNnfo,jdbcType=VARCHAR},
      </if>
      <if test="roleLevel != null" >
        roleLevel = #{roleLevel,jdbcType=INTEGER},
      </if>
      <if test="createData != null" >
        createData = #{createData,jdbcType=VARCHAR},
      </if>
      <if test="createBy != null" >
        createBy = #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="updateBate != null" >
        updateBate = #{updateBate,jdbcType=VARCHAR},
      </if>
      <if test="updateBy != null" >
        updateBy = #{updateBy,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.soecode.lyf.entity.Role" >
    update role
    set roleName = #{roleName,jdbcType=VARCHAR},
      roleNnfo = #{roleNnfo,jdbcType=VARCHAR},
      roleLevel = #{roleLevel,jdbcType=INTEGER},
      createData = #{createData,jdbcType=VARCHAR},
      createBy = #{createBy,jdbcType=VARCHAR},
      updateBate = #{updateBate,jdbcType=VARCHAR},
      updateBy = #{updateBy,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <!--查询比当前管理员角色等级低的角色-->
  <select id="selectAllRole" resultType="map" parameterType="int">
    select
    <include refid="Base_Column_List" />
    from  role
    where
    roleLevel &gt; #{roleLevel,jdbcType=INTEGER}
  </select>

  <!--通过id查询当前管理员角色信息-->
  <select id="selectRoleById" resultType="java.util.Map" parameterType="java.util.Map">
    select
     id, roleName, roleNnfo, roleLevel, createData, createBy, updateBate, updateBy
    from  role
    where
    id in
    <foreach collection="adminParamsList" index="index" item="item" open="(" close=")" separator=",">
      #{item.roleId}
    </foreach>
  </select>

  <!--通过id查询等级-->
  <select id="selectRoleLevelbyId" resultType="java.util.Map" parameterType="java.util.Map">
    select
     roleLevel,roleName,id
    from  role
    where
    id in
    <foreach collection="roleIdList" index="index" item="item" open="(" close=")" separator=",">
      #{item.roleId}
    </foreach>
  </select>

  <select id="selectRoleIdByName" parameterType="java.lang.String" resultType="java.lang.Integer">
    select id
    from role
    where roleName = #{roleName,jdbcType=VARCHAR}
  </select>

  <!--查询角色信息-->
  <select id="selectRole" resultType="java.util.Map">
    select
    <include refid="Base_Column_List" />
    from role
  </select>

  <!--修改角色信息-->
  <update id="updateRole" parameterType="com.soecode.lyf.entity.Role">
    update role
    set roleName = #{roleName,jdbcType=VARCHAR},
      roleNnfo = #{roleNnfo,jdbcType=VARCHAR},
      roleLevel = #{roleLevel,jdbcType=INTEGER},
      updateBate = #{updateBate,jdbcType=VARCHAR},
      updateBy = #{updateBy,jdbcType=VARCHAR}
      WHERE id = #{id,jdbcType=INTEGER}
  </update>

  <!--新增角色信息-->
  <insert id="insertRole" parameterType="com.soecode.lyf.entity.Role" >
    insert into role (roleName, roleNnfo,
      roleLevel, createData, createBy,
      updateBate, updateBy)
    values (#{roleName,jdbcType=VARCHAR}, #{roleNnfo,jdbcType=VARCHAR},
      #{roleLevel,jdbcType=INTEGER}, #{createData,jdbcType=VARCHAR}, #{createBy,jdbcType=VARCHAR},
      #{updateBate,jdbcType=VARCHAR}, #{updateBy,jdbcType=VARCHAR})
  </insert>
</mapper>