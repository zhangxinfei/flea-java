<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.soecode.lyf.mapper.RolePermissionMapper">
    <resultMap id="BaseResultMap" type="com.soecode.lyf.entity.RolePermission">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="permissionId" property="permissionId" jdbcType="INTEGER"/>
        <result column="roleId" property="roleId" jdbcType="INTEGER"/>
        <result column="createData" property="createData" jdbcType="VARCHAR"/>
        <result column="createBy" property="createBy" jdbcType="VARCHAR"/>
        <result column="updateBate" property="updateBate" jdbcType="VARCHAR"/>
        <result column="updateBy" property="updateBy" jdbcType="VARCHAR"/>
    </resultMap>
    <sql id="Base_Column_List">
    id, permissionId, roleId, createData, createBy, updateBate, updateBy
  </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from role_permission
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from role_permission
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <insert id="insert" parameterType="com.soecode.lyf.entity.RolePermission">
    insert into role_permission (id, permissionId, roleId, 
      createData, createBy, updateBate, 
      updateBy)
    values (#{id,jdbcType=INTEGER}, #{permissionId,jdbcType=INTEGER}, #{roleId,jdbcType=INTEGER}, 
      #{createData,jdbcType=VARCHAR}, #{createBy,jdbcType=VARCHAR}, #{updateBate,jdbcType=VARCHAR}, 
      #{updateBy,jdbcType=VARCHAR})
  </insert>
    <insert id="insertSelective" parameterType="com.soecode.lyf.entity.RolePermission">
        insert into role_permission
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="permissionId != null">
                permissionId,
            </if>
            <if test="roleId != null">
                roleId,
            </if>
            <if test="createData != null">
                createData,
            </if>
            <if test="createBy != null">
                createBy,
            </if>
            <if test="updateBate != null">
                updateBate,
            </if>
            <if test="updateBy != null">
                updateBy,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="permissionId != null">
                #{permissionId,jdbcType=INTEGER},
            </if>
            <if test="roleId != null">
                #{roleId,jdbcType=INTEGER},
            </if>
            <if test="createData != null">
                #{createData,jdbcType=VARCHAR},
            </if>
            <if test="createBy != null">
                #{createBy,jdbcType=VARCHAR},
            </if>
            <if test="updateBate != null">
                #{updateBate,jdbcType=VARCHAR},
            </if>
            <if test="updateBy != null">
                #{updateBy,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.soecode.lyf.entity.RolePermission">
        update role_permission
        <set>
            <if test="permissionId != null">
                permissionId = #{permissionId,jdbcType=INTEGER},
            </if>
            <if test="roleId != null">
                roleId = #{roleId,jdbcType=INTEGER},
            </if>
            <if test="createData != null">
                createData = #{createData,jdbcType=VARCHAR},
            </if>
            <if test="createBy != null">
                createBy = #{createBy,jdbcType=VARCHAR},
            </if>
            <if test="updateBate != null">
                updateBate = #{updateBate,jdbcType=VARCHAR},
            </if>
            <if test="updateBy != null">
                updateBy = #{updateBy,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.soecode.lyf.entity.RolePermission">
    update role_permission
    set permissionId = #{permissionId,jdbcType=INTEGER},
      roleId = #{roleId,jdbcType=INTEGER},
      createData = #{createData,jdbcType=VARCHAR},
      createBy = #{createBy,jdbcType=VARCHAR},
      updateBate = #{updateBate,jdbcType=VARCHAR},
      updateBy = #{updateBy,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

    <!--通过角色ID查询权限id-->
    <select id="selectByRoleid" resultType="java.util.Map" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from role_permission
        where
        roleId in
        <foreach collection="adminParamsList" index="index" item="item" open="(" close=")" separator=",">
            #{item.roleId}
        </foreach>
    </select>

    <!--批量添加角色和权限的映射-->
    <insert id="insertPermissionRole" parameterType="java.util.Map">
        insert into role_permission
        (permissionId, roleId,
        createData, createBy)
        values
        <foreach collection="permissionRoleList" index="index" item="item" open="" close="" separator=",">
            (#{item.permissionId},
            #{item.roleId},
            #{item.createData},
            #{item.createBy})
        </foreach>
    </insert>

    <!--批量修改角色和权限的映射-->
    <insert id="updatePermissionRole" parameterType="java.util.Map">
        <foreach collection="permissionRoleList" index="index" item="item" open="" close="" separator=";">
            update role_permission
            set
            permissionId = #{item.id}
            WHERE roleId = #{item.roleId}
        </foreach>
    </insert>


</mapper>